// File: scripts/populate-dictionary.ts (Corrected Version)

import { PrismaClient } from '@prisma/client';
// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±–µ —Ñ—É–Ω–∫—Ü–∏–∏ API
import { listBhajans, getBhajanDetail } from '../api';

const prisma = new PrismaClient();

const cleanWord = (word: string): string => {
  return word.toLowerCase().replace(/[.,!?;:"‚Äú]/g, '');
};

const fetchTranslation = async (word: string) => {
  const response = await fetch('http://localhost:3000/api/translate-word', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ word }),
  });
  if (!response.ok) {
    throw new Error(`Failed to fetch translation for ${word}: ${response.statusText}`);
  }
  return response.json();
};

async function main() {
  console.log('üöÄ Starting dictionary population script...');

  // 1. –ü–æ–ª—É—á–∞–µ–º –°–ü–ò–°–û–ö –≤—Å–µ—Ö –±—Ö–∞–¥–∂–∞–Ω–æ–≤
  const allBhajanstubs = await listBhajans({});
  if (!allBhajanstubs || allBhajanstubs.length === 0) {
    console.log('No bhajans found to process.');
    return;
  }
  console.log(`‚úÖ Found ${allBhajanstubs.length} bhajans. Fetching details...`);

  // 2. –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞, —Ç–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞—è –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É –±—Ö–∞–¥–∂–∞–Ω—É
  const uniqueWords = new Set<string>();
  for (const bhajanStub of allBhajanstubs) {
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–∫–ª—é—á–∞—è 'lyricsWithChords'
    const bhajanDetail = await getBhajanDetail({ id: bhajanStub.id });
    bhajanDetail.lyricsWithChords?.forEach((line: { lyrics: string }) => {
      line.lyrics.split(/\s+/).forEach(word => {
        const cleaned = cleanWord(word);
        if (cleaned.length > 2) {
          uniqueWords.add(cleaned);
        }
      });
    });
  }
  console.log(`üîç Found ${uniqueWords.size} unique words to process.`);

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Set –≤ –º–∞—Å—Å–∏–≤ –ø–µ—Ä–µ–¥ –∏—Ç–µ—Ä–∞—Ü–∏–µ–π
  const wordsToProcess = Array.from(uniqueWords);
  
  let newWordsCount = 0;
  for (const word of wordsToProcess) {
    const existingWord = await prisma.word.findUnique({
      where: { sourceText: word },
    });

    if (!existingWord) {
      try {
        console.log(`‚è≥ Translating new word: "${word}"...`);
        const translation = await fetchTranslation(word);
        
        await prisma.word.create({
          data: {
            sourceText: word,
            sourceLanguage: translation.sourceLanguage,
            transliteration: translation.transliteration,
            russianTranslation: translation.russianTranslation,
            englishTranslation: translation.englishTranslation,
            spiritualMeaning: translation.spiritualMeaning,
            isProperNoun: translation.isProperNoun,
            confidence: translation.confidence,
          },
        });
        newWordsCount++;
        console.log(`üíæ Saved translation for "${word}".`);
        await new Promise(res => setTimeout(res, 1000));
      } catch (error) {
        console.error(`‚ùå Failed to process word "${word}":`, error);
      }
    }
  }

  console.log(`‚ú® Script finished. Added ${newWordsCount} new words to the dictionary.`);
}

main()
  .catch(e => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });