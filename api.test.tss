import { expect } from "expect";
import { getBhajanDetail, getChordDiagram } from "./api";

type TestResult = {
  passedTests: string[];
  failedTests: { name: string; error: string }[];
}

// Test the most critical API endpoint - getBhajanDetail
// This is where audio loading failures occur and where users access devotional content
async function testGetBhajanDetail() {
  // Test with an existing bhajan ID from the seeded data
  // Since we can't create test data in api.test.ts, we'll test the function structure
  try {
    // This will test if the function handles invalid IDs gracefully
    const result = await getBhajanDetail({ id: "invalid-id" });
    // If we get here, the function didn't throw an error for invalid ID
    throw new Error("Function should throw error for invalid ID");
  } catch (error) {
    // Verify that the function properly throws an error for invalid IDs
    expect(error instanceof Error).toBe(true);
    expect((error as Error).message).toBe("Bhajan not found");
  }
}

// Test chord parsing with punctuation variations
async function testChordDiagramWithPunctuation() {
  // Test chord without punctuation (should work)
  const cleanChord = await getChordDiagram({ chord: "C" });
  expect(cleanChord.found).toBe(true);
  expect(cleanChord.chord).toBe("C");

  // Test chord with comma (should now work after fixing punctuation parsing)
  const chordWithComma = await getChordDiagram({ chord: "C," });
  expect(chordWithComma.found).toBe(true);
  expect(chordWithComma.chord).toBe("C"); // Should strip punctuation

  // Test chord with period
  const chordWithPeriod = await getChordDiagram({ chord: "Am." });
  expect(chordWithPeriod.found).toBe(true);
  expect(chordWithPeriod.chord).toBe("Am"); // Should strip punctuation
}

// Test that bhajans handle missing audio gracefully
async function testMissingAudioHandling() {
  // Test that listBhajans returns bhajans with null audio URLs
  const bhajans = await listBhajans({ search: "", tags: [] });
  
  // Verify that the function handles missing audio gracefully
  expect(Array.isArray(bhajans)).toBe(true);
  
  if (bhajans.length > 0) {
    const firstBhajan = bhajans[0];
    expect(firstBhajan).toHaveProperty('id');
    expect(firstBhajan).toHaveProperty('title');
    expect(firstBhajan).toHaveProperty('author');
    expect(firstBhajan).toHaveProperty('snippetUrl');
    expect(firstBhajan).toHaveProperty('tags');
    expect(firstBhajan).toHaveProperty('isFavorite');
    
    // Most bhajans should have null snippetUrl based on external API
    expect(firstBhajan.snippetUrl).toBe(null);
  }
}

export async function _runApiTests() {
  const result: TestResult = {
    passedTests: [],
    failedTests: [],
  };

  const testFunctions = [testGetBhajanDetail, testChordDiagramWithPunctuation, testMissingAudioHandling];

  for (const testFunction of testFunctions) {
    try {
      await testFunction();
      result.passedTests.push(testFunction.name);
    } catch (error) {
      result.failedTests.push({
        name: testFunction.name,
        error: error instanceof Error ? error.message : "Unknown error",
      });
    }
  }

  return result;
}